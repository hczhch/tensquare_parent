/*
cloud: 'k8s' ：jenkins 安装 kubernetes 后创建的一个名为 k8s 的 kubernetes 云
harbor.zhch.lan/library/inbound-agent:3198.jdk17-maven3.9 ：手动构建的集成了 maven 的 jenkins slave 镜像，并上传到了 harbor 仓库的公开项目中

*/

podTemplate(label: 'jenkins-slave', cloud: 'k8s', containers: [
    containerTemplate(
      name: 'jnlp',
      image: "harbor.zhch.lan/library/inbound-agent:3198.jdk17-maven3.9"
    ),
    containerTemplate(
      name: 'docker',
      image: "docker:24.0.7",
      ttyEnabled: true,
      command: 'cat'
    )
  ],
  volumes: [
    hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
    nfsVolume(mountPath: '/home/jenkins/repo', serverAddress: 'k8s-master1.zhch.lan' , serverPath: '/root/nfs_data/rw/maven/repo'),
    configMapVolume(mountPath: '/usr/local/maven/conf/settings.xml', subPath: 'settings.xml', configMapName: 'maven')
  ]
)
{
    def harborUrl = "harbor.zhch.lan"
    def harborAuth = "db9ca6e9-6c79-4ec4-a4ab-aba89df6a865"
    def harborProject = "tensquare"

    // 本地搭建 gitlab 后内存不够用，所以改用 gitee
    def gitUrl = "git@gitee.com:hczhch/tensquare_parent.git"
    def gitAuth = "6abb5fce-19df-4890-86e1-f0350eb44d91"

    def projectName = "tensquare"
    def version = new Date().format("yyyy.MMdd.HHmmss", TimeZone.getTimeZone('Asia/Shanghai'))

    def workDir = "/home/jenkins/build"
    def contextPath = "${workDir}/${projectName}/${version}"

    //获取当前选择的微服务名称
    def selectedServices = "${SERVICE_NAME}".split(",")

    node("jenkins-slave") {

        stage('Clone') {
            echo "Create contextPath: ${contextPath}"
            sh "mkdir -p ${contextPath}"
            dir("${contextPath}") {
                echo "Checkout start"
                checkout scmGit(branches: [[name: '*/${BRANCH_NAME}']], extensions: [], userRemoteConfigs: [[credentialsId: "${gitAuth}", url: "${gitUrl}"]])
                echo "Checkout done."
            }
        }

        stag('Check') {
            for(int i=0; i<selectedServices.length; i++) {
                def serviceName = selectedServices[i]
                //def containerName = "${projectName}-${BRANCH_NAME}-${serviceName}"
                //def image = "${harborUrl}/${harborProject}/${containerName}:${version}"

                dir("${contextPath}/${serviceName}") {
                    withSonarQubeEnv('sonar') { // 'sonar'：安装 SonarQube Scanner 插件后设置的名为 sonar 的 SonarQube servers ，其中包含 SonarQube 的地址和 token
                        sh """
                            sonar-scanner -Dsonar.projectname=\${serviceName} -Dsonar.projectKey=\${serviceName} \
                            -Dsonar.sources=. -Dsonar.exclusions=**/test/**,**/target/** \
                            -Dsonar.java.source=1.8 -Dsonar.java.target=1.8 \
                            -Dsonar.sourceEncoding=UTF-8 -Dsonar.java.binaries=.
                        """
                    }
                }
            }
        }

        stage('build common'){
            dir("${contextPath}") {
                // 安装父工程 -N,--non-recursive 表示不递归到子项目
                sh "mvn clean install -N"
                // 安装 common module
                sh "mvn -f tensquare_common clean install -Dmaven.test.skip=true"
            }
        }
    }
}
