/*
kubectl create secret docker-registry harbor-auth -n k8s-tensquare \
    --docker-server='harbor.zhch.lan' \
    --docker-username='vito' \
    --docker-password='Harbor12345'
 */
// https://www.jenkins.io/doc/pipeline/steps/kubernetes/
// cloud: 'k8s' ：jenkins 安装 kubernetes 插件后创建的一个名为 k8s 的 kubernetes 云
// 每个 Kubernetes namespace 至少包含一个 ServiceAccount：也就是该名字空间的默认服务账号， 名为 default
// jenkins-slave 由 Jenkins Master 动态创建，jenkins-slave 的 namespace 与 Jenkins Master 的 namespace 相同
// serviceAccount: 'jenkins' 的权限可以查看 https://gitee.com/hczhch/kubernetes-learning-notes/blob/master/25%20Jenkins.md
podTemplate(label: 'jenkins-slave', cloud: 'k8s', serviceAccount: 'jenkins', containers: [
    containerTemplate(
      name: 'jnlp',
      image: "harbor.zhch.lan/library/inbound-agent:3198.jdk17-maven3.9"
    )
  ],
  volumes: [
    hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
    hostPathVolume(mountPath: '/usr/bin/docker', hostPath: '/usr/bin/docker'),
    hostPathVolume(mountPath: '/usr/bin/kubectl', hostPath: '/usr/bin/kubectl'),
    nfsVolume(mountPath: '/home/jenkins/repo', serverAddress: 'k8s-master1.zhch.lan' , serverPath: '/root/nfs_data/rw/maven/repo'),
    configMapVolume(mountPath: '/usr/local/maven/conf/settings.xml', subPath: 'settings.xml', configMapName: 'maven')
  ]
)
{
    def harborUrl = "harbor.zhch.lan"
    def harborAuth = "db9ca6e9-6c79-4ec4-a4ab-aba89df6a865"
    def harborProject = "tensquare"

    // 本地搭建 gitlab 后内存不够用，所以改用 gitee
    def gitUrl = "git@gitee.com:hczhch/tensquare_parent.git"
    def gitAuth = "6abb5fce-19df-4890-86e1-f0350eb44d91"

    def projectName = "tensquare"
    def version = new Date().format("yyyy.MMdd.HHmmss", TimeZone.getTimeZone('Asia/Shanghai'))

    def workDir = "/home/jenkins/build"
    def contextPath = "${workDir}/${projectName}/${version}"

    //获取当前选择的微服务名称
    def selectedServices = "${SERVICE_NAME}".split(",")

    node("jenkins-slave") {

        stage('Clone') {
            echo "Create contextPath: ${contextPath}"
            sh "mkdir -p ${contextPath}"
            dir("${contextPath}") {
                echo "Checkout start"
                checkout scmGit(branches: [[name: '*/${BRANCH_NAME}']], extensions: [], userRemoteConfigs: [[credentialsId: "${gitAuth}", url: "${gitUrl}"]])
                echo "Checkout done."
            }
        }

        stage('Check') {
            for(int i=0; i<selectedServices.length; i++) {
                def serviceName = selectedServices[i]

                dir("${contextPath}/${serviceName}") {
                    withSonarQubeEnv('sonar') { // 'sonar'：安装 SonarQube Scanner 插件后设置的名为 sonar 的 SonarQube servers ，其中包含 SonarQube 的地址和 token
                        sh """
                            sonar-scanner -Dsonar.projectname="${serviceName}" -Dsonar.projectKey="${serviceName}" \
                            -Dsonar.sources=. -Dsonar.exclusions=**/test/**,**/target/** \
                            -Dsonar.java.source=1.8 -Dsonar.java.target=1.8 \
                            -Dsonar.sourceEncoding=UTF-8 -Dsonar.java.binaries=.
                        """
                    }
                    timeout(time: 1, unit: 'MINUTES') {
                        // waitForQualityGate : 等待 SonarQube 分析完成并返回质量状态，需要在 SonarQube 中配置 Webhook
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }

        stage('Build'){
            dir("${contextPath}") {
                // 安装父工程 -N,--non-recursive 表示不递归到子项目
                sh "mvn clean install -N"
                // 安装 common module
                sh "mvn -f tensquare_common clean install -Dmaven.test.skip=true"
            }

            for(int i=0; i<selectedServices.length; i++) {
                def serviceName = selectedServices[i]

                dir("${contextPath}/${serviceName}") {
// 编译前先向项目中写入版本文件。部署成功后，通过访问 /version 可以获取版本等信息
// 目前仅有 tensquare_eureka_server 通过 Filter 实现了该功能（具体请查看 VersionFilter.java 文件），其他模块暂未添加 VersionFilter
sh """
tee ./src/main/resources/version.txt <<-'EOF'
Project: ${projectName}<br/>
Service: ${serviceName}<br/>
Branch: ${BRANCH_NAME}<br/>
Build Version: ${version}<br/>
EOF
"""

                    sh "mvn clean package -Dmaven.test.skip=true"
                }
            }
        }

        stage('Image') {
            for(int i=0; i<selectedServices.length; i++) {
                def serviceName = selectedServices[i]
                def containerName = "${projectName}-${BRANCH_NAME}-${serviceName}"
                def image = "${harborUrl}/${harborProject}/${containerName}:${version}"

                dir("${contextPath}/install/${serviceName}") {
                    sh "mv ${contextPath}/${serviceName}/target ."
                    sh "mv target/*.jar target/app.jar"

                    sh "sudo docker build -t ${image} ."

                    // 登录 harbor
                    withCredentials([usernamePassword(credentialsId: "$harborAuth", passwordVariable: 'PASSWD', usernameVariable: 'UNAME')]) {
                        //sh "docker login -u $UNAME -p $PASSWD $harborUrl"
                        sh "echo $PASSWD | sudo docker login -u $UNAME --password-stdin $harborUrl"
                    }
                    // 推送镜像
                    sh "sudo docker push ${image}"
                }
            }
        }

        stage('Publish') {
            def namespace = "${BRANCH_NAME}-${projectName}"

            for(int i=0; i<selectedServices.length; i++) {
                def serviceName = selectedServices[i]
                def containerName = "${projectName}-${BRANCH_NAME}-${serviceName}"
                //def image = "${harborUrl}/${harborProject}/${containerName}:${version}"

                dir("${contextPath}/install/${serviceName}") {
                    sh """
                        sed -i "s/NAMESPACE/${namespace}/g" install.yaml
                        sed -i "s/HARBOR/${harborUrl}/g" install.yaml
                        sed -i "s/PROJECT/${harborProject}/g" install.yaml
                        sed -i "s/IMAGE/${containerName}/g" install.yaml
                        sed -i "s/TAG/${version}/g" install.yaml

                        kubectl apply -f install.yaml
                    """
                }
                echo "Publish down"
            }
        }
    }
}
